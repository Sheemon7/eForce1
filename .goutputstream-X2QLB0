#!/usr/bin/python3
import cv2
import numpy as np
import RPi.GPIO as GPIO
import wiringpi
import cut
import time
import sys
import io
from picamera.array import PiRGBArray
from picamera import PiCamera
#Initialize camera
camera = PiCamera()
camera.resolution = (320, 240)
camera.color_effects = (128, 128)
camera.framerate = 32
rawCapture = PiRGBArray(camera, size=(320, 240))
# Configuration of basic constant
MIN_ANGLE = 80
MAX_ANGLE = 140
CENTER = MIN_ANGLE + (MAX_ANGLE - MIN_ANGLE) / 2
SPEED = 300
# Motor supply enable
MOTOR_SPL_EN_GPIO = 10
# DC motor PWM GPIO
MOTOR_PWM_GPIO = 12
# DC motor direction GPIO
MOTOR_DIR_GPIO = 6
# DC motor disable GPIO
MOTOR_DISABLE_GPIO = 19
# Servo motor PWM GPIO
SERVO_PWM_GPIO = 13

SONIC_ECHO_GPIO = 24
SONIC_TRIG_GPIO = 23

LED_GPIO = 4
SW_GPIO = 26

run = False


# -----------------------------------------------------------

def button_pressed():
    global run
    if not run:
        run = True
    else:
        run = False

def setup_gpios():
    # Setup GPIOs
    wiringpi.wiringPiSetupGpio()

    wiringpi.pinMode(LED_GPIO, wiringpi.GPIO.OUTPUT)
    wiringpi.digitalWrite(LED_GPIO, wiringpi.GPIO.OUTPUT)

    wiringpi.pinMode(MOTOR_SPL_EN_GPIO, wiringpi.GPIO.OUTPUT)

    wiringpi.pinMode(MOTOR_DIR_GPIO, wiringpi.GPIO.OUTPUT)
    wiringpi.pinMode(MOTOR_DISABLE_GPIO, wiringpi.GPIO.OUTPUT)

    wiringpi.pinMode(MOTOR_PWM_GPIO, wiringpi.GPIO.PWM_OUTPUT)
    wiringpi.pinMode(SERVO_PWM_GPIO, wiringpi.GPIO.PWM_OUTPUT)

    wiringpi.pwmSetMode(wiringpi.GPIO.PWM_MODE_MS)
    wiringpi.pwmSetClock(2)
    wiringpi.pwmSetRange(2000)

    wiringpi.pinMode(SONIC_ECHO_GPIO, wiringpi.GPIO.INPUT)
    wiringpi.pinMode(SONIC_TRIG_GPIO, wiringpi.GPIO.OUTPUT)

    GPIO.setmode(GPIO.BCM)
    GPIO.setup(SW_GPIO, GPIO.IN)
    GPIO.add_event_detect(SW_GPIO, GPIO.FALLING, button_pressed, 200)

setup_gpios()

# -----------------------------------------------------------

# Setup motor
wiringpi.pwmWrite(MOTOR_PWM_GPIO, 0)
wiringpi.digitalWrite(MOTOR_SPL_EN_GPIO, 1)
wiringpi.digitalWrite(MOTOR_DISABLE_GPIO, 0)

# Center wheels
wiringpi.pwmWrite(SERVO_PWM_GPIO, int(CENTER))

# -----------------------------------------------------------

Kp = 5  # 1000
Ki = 0  # 100
Kd = 0  # 10000
integral = 0
lastError = 0
derivative = 0
measuring_time = False
first_time = True

# -----------------------------------------------------------

wiringpi.digitalWrite(MOTOR_DIR_GPIO, 0)  # forward
wiringpi.pwmWrite(MOTOR_PWM_GPIO, int(SPEED))

time.sleep(0.2)

for frame in camera.capture_continuous(rawCapture, format="bgr", use_video_port=True):
	img = frame.array
	# if LightValue < 5:
	#     if not measuring_time:
	#         start_time = time.time()
	#         measuring_time = True
	#     elapsed_time = time.time() - start_time
	#
	# else:
	#     measuring_time = False
	#
	# if elapsed_time >= 3:  # if lost line, find it
	#     while LightValue <= 5:
	#         final_turn = CENTER + 15
	#         wiringpi.pwmWrite(SERVO_PWM_GPIO, final_turn)
	#         wiringpi.pwmWrite(MOTOR_PWM_GPIO, SPEED / 8)

	rawCapture.truncate(0)
	error, st, ll, rl, _ =  cut.find_lines_and_center(img, 120, 165)
	integral = integral + error
	derivative = error - lastError
	Turn = Kp * error + Ki * integral + Kd * derivative
	# Turn /= 100  # ????
	final_turn = CENTER + Turn
	if final_turn < MIN_ANGLE:
	    final_turn = MIN_ANGLE
	elif final_turn > MAX_ANGLE:
	    final_turn = MAX_ANGLE
	print("running")
	wiringpi.pwmWrite(SERVO_PWM_GPIO, final_turn)
	# time.sleep(0.01)
	lastError = error
	key = cv2.waitKey(1)
	if key == ord("q"):
		print("Quitting")
		wiringpi.pwmWrite(MOTOR_PWM_GPIO, 0)
		wiringpi.pwmWrite(SERVO_PWM_GPIO, int(CENTER))
		break
